"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/neverthrow";
exports.ids = ["vendor-chunks/neverthrow"];
exports.modules = {

/***/ "(rsc)/./node_modules/neverthrow/dist/index.es.js":
/*!**************************************************!*\
  !*** ./node_modules/neverthrow/dist/index.es.js ***!
  \**************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Err: () => (/* binding */ Err),\n/* harmony export */   Ok: () => (/* binding */ Ok),\n/* harmony export */   Result: () => (/* binding */ Result),\n/* harmony export */   ResultAsync: () => (/* binding */ ResultAsync),\n/* harmony export */   err: () => (/* binding */ err),\n/* harmony export */   errAsync: () => (/* binding */ errAsync),\n/* harmony export */   fromPromise: () => (/* binding */ fromPromise),\n/* harmony export */   fromSafePromise: () => (/* binding */ fromSafePromise),\n/* harmony export */   fromThrowable: () => (/* binding */ fromThrowable),\n/* harmony export */   ok: () => (/* binding */ ok),\n/* harmony export */   okAsync: () => (/* binding */ okAsync),\n/* harmony export */   safeTry: () => (/* binding */ safeTry)\n/* harmony export */ });\nconst defaultErrorConfig = {\n    withStackTrace: false\n};\n// Custom error object\n// Context / discussion: https://github.com/supermacro/neverthrow/pull/215\nconst createNeverThrowError = (message, result, config = defaultErrorConfig)=>{\n    const data = result.isOk() ? {\n        type: \"Ok\",\n        value: result.value\n    } : {\n        type: \"Err\",\n        value: result.error\n    };\n    const maybeStack = config.withStackTrace ? new Error().stack : undefined;\n    return {\n        data,\n        message,\n        stack: maybeStack\n    };\n};\n/******************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */ function __awaiter(thisArg, _arguments, P, generator) {\n    function adopt(value) {\n        return value instanceof P ? value : new P(function(resolve) {\n            resolve(value);\n        });\n    }\n    return new (P || (P = Promise))(function(resolve, reject) {\n        function fulfilled(value) {\n            try {\n                step(generator.next(value));\n            } catch (e) {\n                reject(e);\n            }\n        }\n        function rejected(value) {\n            try {\n                step(generator[\"throw\"](value));\n            } catch (e) {\n                reject(e);\n            }\n        }\n        function step(result) {\n            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n        }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n}\nfunction __values(o) {\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\n    if (m) return m.call(o);\n    if (o && typeof o.length === \"number\") return {\n        next: function() {\n            if (o && i >= o.length) o = void 0;\n            return {\n                value: o && o[i++],\n                done: !o\n            };\n        }\n    };\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n}\nfunction __await(v) {\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\n}\nfunction __asyncGenerator(thisArg, _arguments, generator) {\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function() {\n        return this;\n    }, i;\n    function verb(n) {\n        if (g[n]) i[n] = function(v) {\n            return new Promise(function(a, b) {\n                q.push([\n                    n,\n                    v,\n                    a,\n                    b\n                ]) > 1 || resume(n, v);\n            });\n        };\n    }\n    function resume(n, v) {\n        try {\n            step(g[n](v));\n        } catch (e) {\n            settle(q[0][3], e);\n        }\n    }\n    function step(r) {\n        r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);\n    }\n    function fulfill(value) {\n        resume(\"next\", value);\n    }\n    function reject(value) {\n        resume(\"throw\", value);\n    }\n    function settle(f, v) {\n        if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]);\n    }\n}\nfunction __asyncDelegator(o) {\n    var i, p;\n    return i = {}, verb(\"next\"), verb(\"throw\", function(e) {\n        throw e;\n    }), verb(\"return\"), i[Symbol.iterator] = function() {\n        return this;\n    }, i;\n    function verb(n, f) {\n        i[n] = o[n] ? function(v) {\n            return (p = !p) ? {\n                value: __await(o[n](v)),\n                done: n === \"return\"\n            } : f ? f(v) : v;\n        } : f;\n    }\n}\nfunction __asyncValues(o) {\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\n    var m = o[Symbol.asyncIterator], i;\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function() {\n        return this;\n    }, i);\n    function verb(n) {\n        i[n] = o[n] && function(v) {\n            return new Promise(function(resolve, reject) {\n                v = o[n](v), settle(resolve, reject, v.done, v.value);\n            });\n        };\n    }\n    function settle(resolve, reject, d, v) {\n        Promise.resolve(v).then(function(v) {\n            resolve({\n                value: v,\n                done: d\n            });\n        }, reject);\n    }\n}\nclass ResultAsync {\n    constructor(res){\n        this._promise = res;\n    }\n    static fromSafePromise(promise) {\n        const newPromise = promise.then((value)=>new Ok(value));\n        return new ResultAsync(newPromise);\n    }\n    static fromPromise(promise, errorFn) {\n        const newPromise = promise.then((value)=>new Ok(value)).catch((e)=>new Err(errorFn(e)));\n        return new ResultAsync(newPromise);\n    }\n    static combine(asyncResultList) {\n        return combineResultAsyncList(asyncResultList);\n    }\n    static combineWithAllErrors(asyncResultList) {\n        return combineResultAsyncListWithAllErrors(asyncResultList);\n    }\n    map(f) {\n        return new ResultAsync(this._promise.then((res)=>__awaiter(this, void 0, void 0, function*() {\n                if (res.isErr()) {\n                    return new Err(res.error);\n                }\n                return new Ok((yield f(res.value)));\n            })));\n    }\n    mapErr(f) {\n        return new ResultAsync(this._promise.then((res)=>__awaiter(this, void 0, void 0, function*() {\n                if (res.isOk()) {\n                    return new Ok(res.value);\n                }\n                return new Err((yield f(res.error)));\n            })));\n    }\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any, @typescript-eslint/explicit-module-boundary-types\n    andThen(f) {\n        return new ResultAsync(this._promise.then((res)=>{\n            if (res.isErr()) {\n                return new Err(res.error);\n            }\n            const newValue = f(res.value);\n            return newValue instanceof ResultAsync ? newValue._promise : newValue;\n        }));\n    }\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any, @typescript-eslint/explicit-module-boundary-types\n    orElse(f) {\n        return new ResultAsync(this._promise.then((res)=>__awaiter(this, void 0, void 0, function*() {\n                if (res.isErr()) {\n                    return f(res.error);\n                }\n                return new Ok(res.value);\n            })));\n    }\n    match(ok, _err) {\n        return this._promise.then((res)=>res.match(ok, _err));\n    }\n    unwrapOr(t) {\n        return this._promise.then((res)=>res.unwrapOr(t));\n    }\n    /**\r\n     * Emulates Rust's `?` operator in `safeTry`'s body. See also `safeTry`.\r\n     */ safeUnwrap() {\n        return __asyncGenerator(this, arguments, function* safeUnwrap_1() {\n            return yield __await((yield __await((yield* __asyncDelegator(__asyncValues((yield __await(this._promise.then((res)=>res.safeUnwrap())))))))));\n        });\n    }\n    // Makes ResultAsync implement PromiseLike<Result>\n    then(successCallback, failureCallback) {\n        return this._promise.then(successCallback, failureCallback);\n    }\n}\nconst okAsync = (value)=>new ResultAsync(Promise.resolve(new Ok(value)));\nconst errAsync = (err)=>new ResultAsync(Promise.resolve(new Err(err)));\nconst fromPromise = ResultAsync.fromPromise;\nconst fromSafePromise = ResultAsync.fromSafePromise;\nconst appendValueToEndOfList = (value)=>(list)=>[\n            ...list,\n            value\n        ];\n/**\r\n * Short circuits on the FIRST Err value that we find\r\n */ const combineResultList = (resultList)=>resultList.reduce((acc, result)=>acc.isOk() ? result.isErr() ? err(result.error) : acc.map(appendValueToEndOfList(result.value)) : acc, ok([]));\n/* This is the typesafe version of Promise.all\r\n *\r\n * Takes a list of ResultAsync<T, E> and success if all inner results are Ok values\r\n * or fails if one (or more) of the inner results are Err values\r\n */ const combineResultAsyncList = (asyncResultList)=>ResultAsync.fromSafePromise(Promise.all(asyncResultList)).andThen(combineResultList);\n/**\r\n * Give a list of all the errors we find\r\n */ const combineResultListWithAllErrors = (resultList)=>resultList.reduce((acc, result)=>result.isErr() ? acc.isErr() ? err([\n            ...acc.error,\n            result.error\n        ]) : err([\n            result.error\n        ]) : acc.isErr() ? acc : ok([\n            ...acc.value,\n            result.value\n        ]), ok([]));\nconst combineResultAsyncListWithAllErrors = (asyncResultList)=>ResultAsync.fromSafePromise(Promise.all(asyncResultList)).andThen(combineResultListWithAllErrors);\n// eslint-disable-next-line @typescript-eslint/no-namespace\nvar Result;\n(function(Result) {\n    /**\r\n     * Wraps a function with a try catch, creating a new function with the same\r\n     * arguments but returning `Ok` if successful, `Err` if the function throws\r\n     *\r\n     * @param fn function to wrap with ok on success or err on failure\r\n     * @param errorFn when an error is thrown, this will wrap the error result if provided\r\n     */ // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    function fromThrowable(fn, errorFn) {\n        return (...args)=>{\n            try {\n                const result = fn(...args);\n                return ok(result);\n            } catch (e) {\n                return err(errorFn ? errorFn(e) : e);\n            }\n        };\n    }\n    Result.fromThrowable = fromThrowable;\n    function combine(resultList) {\n        return combineResultList(resultList);\n    }\n    Result.combine = combine;\n    function combineWithAllErrors(resultList) {\n        return combineResultListWithAllErrors(resultList);\n    }\n    Result.combineWithAllErrors = combineWithAllErrors;\n})(Result || (Result = {}));\nconst ok = (value)=>new Ok(value);\nconst err = (err)=>new Err(err);\nfunction safeTry(body) {\n    const n = body().next();\n    if (n instanceof Promise) {\n        return n.then((r)=>r.value);\n    }\n    return n.value;\n}\nclass Ok {\n    constructor(value){\n        this.value = value;\n    }\n    isOk() {\n        return true;\n    }\n    isErr() {\n        return !this.isOk();\n    }\n    map(f) {\n        return ok(f(this.value));\n    }\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    mapErr(_f) {\n        return ok(this.value);\n    }\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any, @typescript-eslint/explicit-module-boundary-types\n    andThen(f) {\n        return f(this.value);\n    }\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any, @typescript-eslint/explicit-module-boundary-types\n    orElse(_f) {\n        return ok(this.value);\n    }\n    asyncAndThen(f) {\n        return f(this.value);\n    }\n    asyncMap(f) {\n        return ResultAsync.fromSafePromise(f(this.value));\n    }\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    unwrapOr(_v) {\n        return this.value;\n    }\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    match(ok, _err) {\n        return ok(this.value);\n    }\n    safeUnwrap() {\n        const value = this.value;\n        /* eslint-disable-next-line require-yield */ return function*() {\n            return value;\n        }();\n    }\n    _unsafeUnwrap(_) {\n        return this.value;\n    }\n    _unsafeUnwrapErr(config) {\n        throw createNeverThrowError(\"Called `_unsafeUnwrapErr` on an Ok\", this, config);\n    }\n}\nclass Err {\n    constructor(error){\n        this.error = error;\n    }\n    isOk() {\n        return false;\n    }\n    isErr() {\n        return !this.isOk();\n    }\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    map(_f) {\n        return err(this.error);\n    }\n    mapErr(f) {\n        return err(f(this.error));\n    }\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any, @typescript-eslint/explicit-module-boundary-types\n    andThen(_f) {\n        return err(this.error);\n    }\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any, @typescript-eslint/explicit-module-boundary-types\n    orElse(f) {\n        return f(this.error);\n    }\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    asyncAndThen(_f) {\n        return errAsync(this.error);\n    }\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    asyncMap(_f) {\n        return errAsync(this.error);\n    }\n    unwrapOr(v) {\n        return v;\n    }\n    match(_ok, err) {\n        return err(this.error);\n    }\n    safeUnwrap() {\n        const error = this.error;\n        return function*() {\n            yield err(error);\n            throw new Error(\"Do not use this generator out of `safeTry`\");\n        }();\n    }\n    _unsafeUnwrap(config) {\n        throw createNeverThrowError(\"Called `_unsafeUnwrap` on an Err\", this, config);\n    }\n    _unsafeUnwrapErr(_) {\n        return this.error;\n    }\n}\nconst fromThrowable = Result.fromThrowable;\n//#endregion\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/neverthrow/dist/index.es.js\n");

/***/ })

};
;